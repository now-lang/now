[Now as an alternative to Make]
focal_point "constants/targets/release"

A very convoluted way of doing the same a Makefile would do much more easily.


[constants/targets/release]
description "now binary, release"
output_filepath "dist/now"
source_files {
    - {
        directory "source/now"
        pattern "*.d"
    }
    - {
        directory "cli/now"
        pattern "*.d"
    }
}
debug false
command compile


[constants/targets/debug]
description "now binary, debug"
output_filepath "dist/now.debug"
source_files {
    - {
        directory "source/now"
        pattern "*.d"
    }
    - {
        directory "cli/now"
        pattern "*.d"
    }
}
debug true
command compile


[system_commands/ldc_bin]
parameters {
    files {
        type {
            - list
            - path
        }
    }
    output_filepath {
        type string
    }
    optimization {
        type int
        min 0
        max 3
        default 2
    }
    extra {
        type list
        default {}
    }
}
key_value_separator "="
option_prefix "-"
command {
    - "ldc2"
    - $files
    - $extra
    - "-I=source"
    - "-I=cli/source"
    - "--checkaction=halt"
    - "-od=build"
    - "-O$optimization"
    - "-of"
    - $output_filepath
}


[system_commands/ldc_obj]
parameters {
    file {
        type path
    }
    output_filepath {
        type string
    }
    optimization {
        type int
        min 0
        max 3
        default 2
    }
    extra {
        type list
        default {}
    }
}
key_value_separator ""
option_prefix "-"
command {
    - ldc2
    - -c
    - $file
    - $extra
    - "-I=source"
    - "-I=cli/source"
    - "-O$optimization"
    - "-of"
    - $output_filepath
}

[procedures/compile]
parameters {
    files {
        type list
    }
    output_filepath {
        type string
    }
    debug {
        type bool
        default false
    }
}

list | as extra
if $debug {
    o $extra : push "--d-debug"
}

json.encode $extra | md5 | as options_hash

list | as processes
scope "generate object files" {
    list
        | as object_files

    o $files | foreach file {
        path $file
            : read
            | md5
            | as hash

        path "build/${hash}-${options_hash}.o"
            | as obj_file
            ! >> {discard ; o $object_files : push $obj_file}
            ! >> {o : exists : then {continue}}

        log "Compiling $file into $obj_file ."
        ldc_obj $file $obj_file -- (extra = $extra)
            | as p

        o $processes
            ! >> {o : push $p}
            : length : gte 5 : then {
                log "Waiting the compiler..."
                o $processes
                    ! >> {o | {o : check}}
                    : truncate
            }
    }
}

o $processes | {o : check}

scope "generate binary" {
    log "Compiling all $($object_files : length) object files..."
    # log "ldc_bin $object_files $output_filepath -- (extra = $extra)"
    ldc_bin $object_files $output_filepath -- (extra = $extra) | { print }
}


[procedures/make]
parameters {
    target_name {
        type string
    }
}

log "Making $target_name ..."
obj $targets : get $target_name | as target

scope "resolve dependencies" {
    try { obj $target : get depends_on } { list } | foreach dependency {
        make $dependency
    }
}

scope "compile" {
    obj $target : get command | as command
    list | as source_files

    obj $target : get source_files | foreach pair {
        path ($pair . directory) | as directory
        set pattern ($pair . pattern)

        obj $directory : glob.depth $pattern | foreach file {
            # print "file=$file"
            obj $source_files : push $file
        }
    }

    obj $target : get output_filepath | path | as output_filepath
    timer {
        call $command
            . $source_files
            . $output_filepath
            . -- (debug = ($target . debug))
            | foreach line {
                log "$command: $line"
            }
    } {
        log "$output_filepath was compiled in $miliseconds miliseconds."
    }
    ! * {
        log ">>>>> ERROR: $error"
        error $error
    }
}

[commands/build/on.call]
description "Verify if the user is running from inside the examples directory."

obj $env : get "PWD" : split "/" | as pwd
obj $pwd : length | as length
obj $pwd : get ($length - 1) | as cwd
if (($cwd == "examples") || ($cwd == "make")) {
    print "Do not run this program from inside the examples directory!"
    print "Go to the repository root and run it this way:"
    print "    cat examples/make/program.now | now :stdin build"
    print "--------------------------------------------------------"
    exit 1
}

[commands/build]
description "Build now binary"
parameters {
    target {
        description "debug/release"
        type string
        default "release"
        choices {
            - "release"
            - "debug"
        }
    }
}

make $target


[commands/clean]

path "dist/*.o" : glob | {o : delete}
