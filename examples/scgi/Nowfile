[Sockets Usage Example]

This document shows how to serve a TCP Socket
using Now.

[system_commands/docker]
command {
    - docker
    - $args
}
which false
take_over true

[procedures/compose]
parameters {
    operation {
        type string
    }
}

docker compose up | :: check

[procedures/compose/on.return]

docker compose down | :: check

[tasks/connection_handler]
parameters {
    connection {
        type tcp_connection
    }
}

log "connection_handler: $connection"

o $connection | foreach data {
    log "data: <<$data>>"
    log "Data length: " ($data : length)

    scope "SCGI" {
        o $data
            | :: netstrings
            | >> {
                :: as
                    . headers_strings
                    . body
                log "Headers strings: $headers_strings"
                log "Body: $body"
                return $headers_strings
            }
            | :: first
            | as headers_string
            | :: c.strings
            | :: to.pairs
            | dict
            | as headers
            | >> {
                log "Headers: $headers"
                log "Header string length: " ($headers_string : length)
            }
            | >> {
                :: get "REQUEST_URI"
                    | as path
                    | log "Path: "
            }
            | >> {
                :: get "QUERY_STRING"
                    | as query_params
                    | log "Query parameters: "
            }
            | >> {
                :: get "REQUEST_METHOD"
                    | as request_method
                    | log "Request method: "
            }

        set msg "Hello, world!"
            | :: length
            | as content_length

        o $connection | :: send "Status: 200 OK
Content-Type: text/plain
Content-Length: $content_length

$msg"
        break
    }
}
log "closing connection"
o $connection | :: close

[commands/scgi]
description "Starts the SCGI server. Don't call it directly."
parameters {
    port {
        type integer
        default 5000
    }
    host {
        type string
        default localhost
    }
}

tcp.serve $host $port
    | foreach connection {
        connection_handler $connection
            ! * {
                log "Error! Closing connection."
                log $error
                o $connection | :: close
            }
    }

[commands/run]
description "Starts the HTTP server"

compose up | :: check

[commands/get]
description "Sends a GET request to the HTTP server."
parameters {
    port {
        type integer
        default 8000
    }
    host {
        type string
        default localhost
    }
}

set request "GET /index.php HTTP/1.1
Host: localhost
User-Agent: Now
Accept: text/html

"

log "request: <<$request>>"

tcp.connect $host $port
    ! * {print "Whoops! And error! $error" ; return $error}
    | >> {
        print "connection object: "
    }
    | >> {
        :: send $request
        print "Request sent"
    }
    | >> {
        foreach response {
            print "response: $response"
            break
        }
    }
    | __ {
        print "Closing socket..."
    }
    | :: close

print "Quit."
