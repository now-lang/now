[program]
# vim: syntax=toml
name "PlantUML Example"
description "Show how to encapsulate a diagram definition inside a Now program"
focal_point "shells/plantuml/scripts/sequence_diagram"


[shells/bash/scripts/create_plantuml_file]
description "Given a PlantUML content, creates a file with both startuml and enduml markers"
parameters {
    filepath {
        type string
    }
    content {
        type string
    }
}

echo "@startuml" > $filepath
echo "$content" >> $filepath
echo "@enduml" >> $filepath


[system_commands/visualize]
description "Open a file using a proper program from the system"
parameters {
    filepath {
        type string
    }
}
command {
    - open
    - $filepath
}


[shells/plantuml]
command {
    - plantuml
    - "${script_name}.uml"
}


[shells/plantuml/on.call]
description "PlantUML only works with files, so we create one here."

scope "time it!" {
    timer {
        create_plantuml_file "${script_name}.uml" $script_body
    } {
        print "generating the file took $microseconds microseconds, or $miliseconds miliseconds."
    }
}


[shells/plantuml/on.return]
description "After generating a diagram, open it for visualization."

wait $process | as return_code
if ($return_code == 0) {
    set filepath "${script_name}.png"
    visualize $filepath
} else {
    print "PlantUML returned $return_code"
}


[shells/plantuml/scripts/sequence_diagram]
description "A simple sequence diagram"
parameters {
    name1 {
        type string
        default "Alfa"
    }
    name2 {
        type string
        default "Beta"
    }
}
expand_variables true

$name1 -> $name1 : request
$name1 <-- $name2 : reply


[commands/run]
description "Generate and visualize a diagram using PlantUML."
parameters {
    name1 {
        type string
        default "Alfa"
    }
    name2 {
        type string
        default "Beta"
    }
}

sequence_diagram $name1 $name2
