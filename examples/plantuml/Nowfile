[PlantUML Example]
focal_point "shells/plantuml/scripts/sequence_diagram"

Show how to encapsulate a diagram definition inside a Now program.

[system_commands/visualize]
description "Open a file using a proper program from the system"
parameters {
    filepath {
        type string
    }
}
command {
    - open
    - $filepath
}


[shells/plantuml]
command {
    - plantuml
    - "$filepath"
}

[shells/plantuml/on.call]
description "PlantUML only works with files, so we create one here."

path "${script_name}.uml" | as filepath

scope "time it!" {
    timer "generate an UML file"
        | __ {
            o $filepath
                | >> {:: write "@startuml\n"}
                | >> {:: append $script_body}
                | >> {:: append "@enduml\n"}
        }
        | as timer

    log "it took $($timer : usecs)us to $($timer : description)."
}

timer "generate the diagram"

[shells/plantuml/on.return]
description "After generating a diagram, open it for visualization."

list
    | >> {:: first | as timer}
    | >> {:: last | as process}

o $process | :: wait
    | :: eq 0
    | >> {:: then {
        set filepath "${script_name}.png"
        visualize $filepath | as visualization_process
    }}
    | >> {:: else {
        log "PlantUML returned $return_code"
        return
    }}

log "PlantUML took $($timer : msecs)ms to $($timer : description)."
o $visualization_process | :: check


[shells/plantuml/scripts/sequence_diagram]
description "A simple sequence diagram"
parameters {
    name1 {
        type string
        default "Alfa"
    }
    name2 {
        type string
        default "Beta"
    }
}
expand_variables true

$name1 -> $name2 : request
$name1 <-- $name2 : reply


[commands/run]
description "Generate and visualize a diagram using PlantUML."
parameters {
    name1 {
        type string
        default "Alfa"
    }
    name2 {
        type string
        default "Beta"
    }
}

sequence_diagram $name1 $name2
