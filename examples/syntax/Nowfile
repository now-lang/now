[Now's syntax examples]

Illustrate some aspects of Now's syntax.


[Some string madness]
> What if we don't need to quote strings?
> or even start with capital letters?
> but this can only work on section dicts, not inside SubPrograms!
> (And each `>` will be turned into a `-`, so Dict implementation won't even see what is happening.)

[procedures/methods]

dict (k = v) | as dict
obj $dict : get k | print "(dict . k) is "


[system_commands/wd]
parameters {
    directory {
        type string
    }
}
command {
    - pwd
}
workdir $directory


[system_commands/cat]
command {
    - cat
}
take_over true


[system_commands/date]
command {
    - date
}


[commands/uuid]

uuid.sha1 "now" | print "uuid.sha1 now="
uuid.sha1 "now" "run" | print "uuid.sha1 now run="
uuid.sha1 "run" | print "uuid.sha1 run="

uuid.random | print "uuid.random="

[commands/random]

random 1 5 | print "random 0 5="

[commands/list_generation]
description "Equivalent to 'list comprehensions' but without any special syntax."
reference "http://xahlee.info/comp/list_comprehension.html"

# Python:
# [2 * n for n in range(0,9) if ((n % 2) == 0)]
# Ruby:
# (0..9).select{|n| n.even?}.map{|n| 2*n}
range 0 8 | transform x {
    if ($x % 2 != 0) {
        skip
    }
    return ($x * 2)
} | collect | as result
print $result
assert ($result == (0 , 4 , 8 , 12 , 16))
log "ok!"


[commands/strings]
description "Show some special cases of strings."

set s {{ A string that won't expand $variables }}
print $s


[commands/get]
description "Show how to use the `get` command."

set "TESTE" 123
get "TESTE" | print "TESTE value is: "


[commands/wd]
description "Run a system_command in another work directory."
parameters {
    directory {
        type string
        default "/dev"
    }
}

try {
    wd $directory | { print }
}


[commands/date]


date | { print ">>> " }


[commands/cat]
description "Show how to call an interactive program"

cat : check
print "quitting..."


[commands/booleans]
description "Test boolean logic and operators."

obj true : then {
    dict (k = 1)
} {
    dict (k = 2)
} : get k : eq 1 | assert "k should be 1"


set x true
run {
    when ($x == true) {
        dict (k = 1) | return
    }
    when ($x == false) {
        dict (k = 2) | return
    }
} : get k : eq 1 | assert "k should be 1"


[commands/run]
description "General syntax tests"

scope "Dict : get" {
    dict (a = 10) (b = 20) : get a : eq 10 | assert
}

scope "type identification" {
    assert ((123 type) == "integer")
    assert (("123" type) == "string")
    assert ((1.23 type) == "float")
    assert (([dict] type) == "dict")
}

scope "type coercion" {
    assert ((123 to.string) == "123")
    assert ((1.23 to.string) == "1.23")
    assert (("123" to.integer) == 123)
    assert ((1 to.bool) == true)
    assert ((0 to.bool) == false)

    scope "floating point type conversion" {
        # Now has a GAMBIARRA to work with floats
        # and equals operation: it multiplies both
        # sides by 1000, so most day-to-day operations
        # can work okay-ish without worrying too much
        # about implementation details of floating point
        # numbers.
        assert (("1.23" to.float) == 1.23)
        # It's kinda convenient when you want to compare
        # small fractions, like 1.25, but terrible when
        # working with great precision:
        #
        # This SEEMS fine:
        assert (("2.2345678901234567893" to.float) == 2.2345678901234567893)
        # But is actually not that fine:
        assert (("1.2345" to.float) == 1.23459999999)
        # Now tries to be CONVENIENT. Besides, using direct "equals"
        # comparisons between floats is a bad idea in any language,
        # se I assume whoever is using this is NOT that interested
        # in great precision anyways.
    }
}

scope "loops" {
    scope "breaking a loop" {
        range 1 10 | foreach x {
            if ($x == 5) { break }
        }
        assert ($x == 5)
    }
    scope "continuing a loop" {
        range 1 10 | foreach x {
            continue
            set x 100
        }
        assert ($x == 10)
    }
    scope "skipping in a loop" {
        set sum 0
        range 1 5 | transform x {
            if ($x > 1) {
                skip
            }
            return $x
        } | foreach x {
            set sum ($sum + $x)
        }
        assert "$sum should be 1" ($sum == 1)
    }
    scope "returning from inside a loop" {
        set x [
            range 1 10 | foreach x {
                return $x
            }
        ]
        assert ($x == 1)
    }
}

scope "sleep and timer" {
    timer {
        sleep 0.1
    } {
        assert ($nanoseconds > 0)
        assert ($seconds < 1)
    }
}

scope "val" {
    set name "NOT A VALID ATOM AT ALL!"
    set $name 123
    val $name | as x
    assert ($x == 123)
}

scope "vars" {
    set x 1
    set y 2
    vars | as v
    obj $v : contains x | assert
    obj $v : contains "x" | assert
    obj $v : contains y | assert
    obj $v : contains "y" | assert
}

scope "when" {
    set x 1
    set y [
        when ($x == 0) { return zero }
        when ($x == 1) { return one }
        default { return other }
    ]
    assert "'$y' should be 'one'" ($y == one)
}
scope "default" {
    set x 100
    set y [
        when ($x == 0) { return zero }
        when ($x == 1) { return one }
        default { return other }
    ]
    assert ($y == other)
}

scope "collect" {
    range 1 10 | collect | as l
    assert "$l length should be 10" (($l : length) == 10)
    assert (($l . 0) == 1)
    assert (($l . 9) == 10)
}

scope "call" {
    call set x 10
    assert ($x == 10)
}
