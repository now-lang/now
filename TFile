[TFile]

A document to be transpiled to C.

[commands/run]

o "World"
    | printf "Hello, %s!\n"
# Alternative:
cstring "World"
    | printf "Hello, %s!\n"

types "types> "

[procedures/types]
parameters {
    prompt {
        type string
    }
}

emit "// This is something emitted by Now code!"

char | array | as char_asterisk
uint8 | as counter | is 5
string | as s
float | as f | is 123.45
int | array | as a | is (10 , 20 , 30 , 40)

iterate $counter {
    printf "%s%x" $prompt
}

[Idea: Now **with** a C generator]

Not *only* a C generator.

Example:

# This is good old Now (with only the addition of `$`):
o "World" | print "Hello, " $ "!"

# Now this will EMIT C code:
o "World" | c printf "Hello, %s!\n"

The `c` command will get `input` items and call the `emit` method
for each one, instead of letting the command itself (`o` in this case)
do it. This way, a String can behave normally, while simply implementing
one new method (or two, like `emitDeclaration` and `emitValue`, maybe).

The result of the above pipeline would be:

const char * string_world "World";    // auto varName = String.emitDeclaration()
printf("Hello, %s!\n", string_world);

or:

//D auto value = String.emitValue()
printf("Hello, %s!\n", "World");


Maybe we should have a way of defining variables:

c.var string "Mars" | as s
c printf "Hey, %s!\n" $s

The value object will expand to a varname, that'll NOT be `s`.

Because it's a C variable, `.emitValue` will return it's internally
decided C variable name. The result would be:

char * string_mars = "Mars";
printf("Hey, %s!\n", string_mars);

[Creating C functions]

    [procedure/hello]
    returns void
    parameters {
        who [c.var string]
    }

    o $who | c printf "Hello, %s!\n"

The result would be:

void hello(char * arg1)
{
    // $who is a C Variable, so it'll emit it's name, not actual value.
    printf("Hello, %s!\n", arg1)
}

The way to call it as a C function would be:

c hello "Earth"

This will mark the procedure `hello` to be declared as a C function.

For the body of the function to be rendered, it's just a matter of
executing the procedure (the arguments values will must be evaluated).

[Modules]

Should we implement this???

    [My Program]
    module {
        name "cgen"
    }

// Sample C function name:
int cgen_test(void* memory);

Accessing other modules:
o "teste" | c cgen.test | as result

[Cast]

// C example:
long x;
int y = 10;
x = (long) y;

c.var long 10 | as x
c.set $x [c.cast long 10]

[Flow control]

c.iterate 10 {
    c printf "index=%d"
}

c.var int 10 | as max
c.for ("i = $max" , "i > 0" , "i--") {
    c printf "index=%d" i
}
c.var int 0 | as i
c.while "$i < $max" {
    c printf "index=$i" $i
    c $i ++
}

[Referencing]

c.var char "x" | as c
c function_that_needs_a_pointer [c.ref $c]

// C:
char cvar1 = 'x';
function_that_needs_a_pointer(&cvar1);

And the opposite:
c.var char | c.pointer | as c
c.deref $c | c.assign "y"
c printf "%c" [c.deref $c]

// C:
char* cvar2;
*cvar2 = 'y';
printf("%c", *cvar2);

[Arrays]
c.array int 3 3 [list
    . (1 , 2 , 3)
    . (4 , 5 , 6)
    . (7 , 8 , 9)
] | as a
// C:
int avar1[3][3] = {{1,2,3},{4,5,6},{7,8,9}};

c.iter 3 {
    as i
    c.iter 3 {
        as j
        c printf "a[%d][%d]=%d" $i $j ($a . $i . $j);
    }
}
// C:
for (fvar1 = 0; fvar1 < 3; fvar1++)
{
    for (fvar2 = 0; fvar2 < 3; fvar2++)
    {
        printf("a[%d][%d]=%d", fvar1, fvar2, avar1[fvar1][fvar2]);
    }
}

[Structs]

    [c/struct/point]
    typedef true
    fields {
        x {
            type int
        }
        y {
            type int
        }
        name {
            type string
        }
    }
// C:
typedef struct {
    int x;
    int y;
    char* name;
} point;

Usage:
c.var point (12 , 34 , "p1")
// C:
point point_var1 = {12, 34, "p1"};

[Unions]

# Union declaration:
    [c/union/ud]
    typedef true
    fields {
        i {
            type int
        }
        f {
            type float
        }
        b {
            type byte
        }
    }

// C:
union ud1 {
    int i;
    float f;
    byte b;
};

# Union instance:
c.var $ud | as ui
// C:
union ud1 ui1;

# Instance field, set value:
c.set ($ui1 . i) 10
// C:
ui1.i = 10;

[Header file]

// header file (now.h)
typedef now_string char *
